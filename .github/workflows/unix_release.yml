run-name: 'Deploy package by @${{ github.actor }}'
on:
  pull_request:
    branches:
      - main
      - pre_alpha
defaults:
  run:
    shell: bash
env:
  SOURCE_DIR: ${{ github.workspace }}
  QT_VERSION: 6.5.1

jobs:
  build_matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
           - os: ubuntu-latest
             qt-os: linux
             qt-arch: gcc_64
           - os: windows-latest
             qt-os: windows
             qt-arch: 'win64_msvc2019_64'
           - os: macos-latest
             qt-os: mac
             qt-arch: 'clang_64'

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: (1) Checkout repo
        uses: actions/checkout@v3
        timeout-minutes: 5
        with:
          fetch-depth: 0

      - name: (2) Get all tags for correct version determination
        working-directory: "${{ env.SOURCE_DIR }}"
        timeout-minutes: 5
        shell: bash
        run: |
          git fetch --all --tags -f

      - name: (3) Install Qt
        uses: jurplel/install-qt-action@v3
        timeout-minutes: 10
        with:
          version: '${{ env.QT_VERSION }}'
          host: ${{ matrix.qt-os }}
          target: desktop
          arch: ${{ matrix.qt-arch }}
          dir: "${{ env.SOURCE_DIR }}"
          setup-python: false
          aqtversion: ==3.1.*
          modules: 'qtmultimedia' 

      - name: (3.1) Install Latex & gcov on ubuntu
        working-directory: "${{ env.SOURCE_DIR }}"
        if: startsWith(matrix.os, 'ubuntu')
        timeout-minutes: 10
        run: |
          sudo apt-get update && sudo apt-get upgrade
          sudo apt-get install -y texlive-latex-extra latexmk 
          pip install gcovr

      - name: (3.1) Install Latex on windows
        working-directory: "${{ env.SOURCE_DIR }}"
        if: startsWith(matrix.os, 'windows')
        timeout-minutes: 10
        shell: bash
        env:
          MIKTEX_ZIP: miktexsetup-5.5.0+1763023-x64.zip
          MIKTEX_BASE_URL: 'https://ctan.math.illinois.edu/systems/win32/miktex'
          LOCAL_MIKTEX_REPO: 'C:/MiKTeX-Repo'
          BIN_DIR_WINDOWS:      'C:/Program Files/MiKTeX/miktex/bin/x64/'
          BIN_DIR_WINDOWS_UNIX: '/c/Program Files/MiKTeX/miktex/bin/x64/'
        run: |
          curl --location --remote-name $MIKTEX_BASE_URL/setup/windows-x64/$MIKTEX_ZIP
          unzip $MIKTEX_ZIP

          ./miktexsetup_standalone --verbose \
            --local-package-repository=$LOCAL_MIKTEX_REPO \
            --remote-package-repository="$MIKTEX_BASE_URL/tm/packages/" \
            --package-set=essential \
            download

          ./miktexsetup_standalone --verbose \
            --local-package-repository=$LOCAL_MIKTEX_REPO \
            --package-set=essential \
            --shared=yes \
            install

          # Adding MiKTeX bin folder to PATH and to GITHUB_PATH
          echo "$BIN_DIR_WINDOWS" >> $GITHUB_PATH
          export PATH="$BIN_DIR_WINDOWS_UNIX:$PATH"

          # Configure MiKTeX to install missing packages on the fly"
          initexmf --admin --verbose --set-config-value='[MPM]AutoInstall=1'
          # Configure default mirror for packages
          mpm --admin --set-repository="$MIKTEX_BASE_URL/tm/packages/"
          mpm --find-updates
          mpm --admin --find-updates

      - name: (3.1) Install Latex & dvisvgm on mac
        working-directory: "${{ env.SOURCE_DIR }}"
        if: startsWith(matrix.os, 'macos')
        timeout-minutes: 10
        run: |
          brew install --cask basictex
          PATH=/usr/local/texlive/2023basic/bin/universal-darwin:"${PATH}"
          sudo tlmgr update --self --all
          sudo tlmgr install latexmk standalone preview dvisvgm
          sudo tlmgr path add

      - name: (3.2) Setup ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
        timeout-minutes: 5
        id: setup-ffmpeg

      - name: (4) Create build directory unix
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'macos') 
        timeout-minutes: 1
        run: |
          mkdir -p "${{ env.SOURCE_DIR }}"/build
      
      - name: (4) Create build directory windows
        if: startsWith(matrix.os, 'windows')
        timeout-minutes: 1
        run: |
          mkdir -p "${{ env.SOURCE_DIR }}\build"

      - name: (5) Build unix
        if: startsWith(matrix.os, 'ubuntu') 
        working-directory: "${{ env.SOURCE_DIR }}/build"
        timeout-minutes: 15
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -DRUN_CODE_COVERAGE=True "${{ env.SOURCE_DIR }}" 
          cmake --build . 
          
      - name: (5) Build macos
        if: startsWith(matrix.os, 'macos') 
        working-directory: "${{ env.SOURCE_DIR }}/build"
        timeout-minutes: 15
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release "${{ env.SOURCE_DIR }}" 
          cmake --build . 
     
      - name: (5) Build windows
        if: startsWith(matrix.os, 'windows')
        working-directory: "${{ env.SOURCE_DIR }}/build"
        timeout-minutes: 15
        shell: bash
        run: |
          cmake "${{ env.SOURCE_DIR }}" 
          cmake --build . --config Release
      
      - name: (6) Run tests on windows
        if: startsWith(matrix.os, 'windows') 
        working-directory: "${{ env.SOURCE_DIR }}/build"
        timeout-minutes: 15
        run: |
          export QT_QPA_PLATFORM=offscreen
          ctest -VV -C Release --output-on-failure -LE SKIP*   
          
      - name: (6) Run tests on macos
        if: startsWith(matrix.os, 'macos') 
        working-directory: "${{ env.SOURCE_DIR }}/build"
        timeout-minutes: 15
        run: |
          export QT_QPA_PLATFORM=offscreen
          ctest -VV -C Release --output-on-failure

      - name: (7) Run tests and code coverage on unix 
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: "${{ env.SOURCE_DIR }}/build"
        timeout-minutes: 15
        run: |
          export QT_QPA_PLATFORM=offscreen
          cmake --build . --target mva_test_coverage -j4

      - name: (8) Upload coverage reports to Codecov
        if: startsWith(matrix.os, 'ubuntu') 
        uses: codecov/codecov-action@v3
        env:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/mva_test_coverage.xml
          flags: unittests
          name: codecov-mva

